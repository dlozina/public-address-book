// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PublicAddressBook.DataAccess.Context;

namespace PublicAddressBook.DataAccess.Migrations
{
    [DbContext(typeof(PublicAddressBookContext))]
    partial class PublicAddressBookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PublicAdressBook.Shared.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HomePhone")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            Address = "Krbavska 9",
                            DateOfBirth = new DateTime(1986, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomePhone = "+385 910 787878",
                            MobilePhone = "+385 910 787878",
                            Name = "Dino Lozina",
                            WorkPhone = "+385 910 787878"
                        },
                        new
                        {
                            ContactId = 2,
                            Address = "Wonderland",
                            DateOfBirth = new DateTime(1990, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomePhone = "+385 (021 555-555)",
                            MobilePhone = "+385 910 787878",
                            Name = "John Doe",
                            WorkPhone = "+385 910 787878"
                        },
                        new
                        {
                            ContactId = 3,
                            Address = "Gotham",
                            DateOfBirth = new DateTime(1992, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomePhone = "+385 (021 555-444)",
                            MobilePhone = "+385 910 787878",
                            Name = "Bruce Wayne",
                            WorkPhone = "+385 910 787878"
                        },
                        new
                        {
                            ContactId = 4,
                            Address = "Slivno",
                            DateOfBirth = new DateTime(1992, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomePhone = "+385 (021 555-444)",
                            MobilePhone = "+385 910 787878",
                            Name = "Lara Croft",
                            WorkPhone = "+385 910 787878"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
